(in-package :gamebox-math.test)

(plan nil)

(diag "vector structure")
(is-type +zero-vector+ '(simple-array single-float (3)))
(is-type (vec) '(simple-array single-float (3)))
(is-type (vec 1) '(simple-array single-float (3)))
(is-type (vec 1 2) '(simple-array single-float (3)))
(is-type (vec 1 2 3) '(simple-array single-float (3)))

(diag "vector accessors")
(is (vref (vec) 0) 0.0)
(is (vref (vec) 1) 0.0)
(is (vref (vec) 2) 0.0)
(is (vref (vec 1) 0) 1.0)
(is (vref (vec 1) 1) 0.0)
(is (vref (vec 1) 2) 0.0)
(is (vref (vec 1 2) 0) 1.0)
(is (vref (vec 1 2) 1) 2.0)
(is (vref (vec 1 2) 2) 0.0)
(is (vref (vec 1 2 3) 0) 1.0)
(is (vref (vec 1 2 3) 1) 2.0)
(is (vref (vec 1 2 3) 2) 3.0)
(let ((v (vec)))
  (setf (vref v 0) 10.0 (vref v 1) 20.0 (vref v 2) 30.0)
  (is (vref v 0) 10.0)
  (is (vref v 1) 20.0)
  (is (vref v 2) 30.0))
(with-vector (v (vec 1 2 3))
  (is vx 1.0)
  (is vy 2.0)
  (is vz 3.0)
  (psetf vx 10.0 vy 20.0 vz 30.0)
  (is vx 10.0)
  (is vy 20.0)
  (is vz 30.0))
(with-vectors ((v1 (vec 1 2 3)) (v2 (vec 4 5 6)))
  (is v1x 1.0)
  (is v1y 2.0)
  (is v1z 3.0)
  (is v2x 4.0)
  (is v2y 5.0)
  (is v2z 6.0)
  (psetf v1x 10.0 v1y 20.0 v1z 30.0 v2x 40.0 v2y 50.0 v2z 60.0)
  (is v1x 10.0)
  (is v1y 20.0)
  (is v1z 30.0)
  (is v2x 40.0)
  (is v2y 50.0)
  (is v2z 60.0))

(diag "vector copy")
(with-vectors ((v (vec 1 2 3)) (o (vec)))
  (ok (v= (vcp! o v) (vec 1 2 3)))
  (ok (v= o (vec 1 2 3)))
  (ok (v= (vcp v) (vec 1 2 3)))
  (isnt v (vcp v) :test #'eq))

(diag "vector clamp")
(with-vectors ((v (vec -3 2 -3)) (o (vec)))
  (ok (v= (vclamp! o v :min -1.0 :max 1.0) (vec -1 1 -1)))
  (ok (v= o (vec -1 1 -1)))
  (ok (v= (vclamp v :min -1.0 :max 1.0) (vec -1 1 -1))))

(diag "vector stabilize")
(with-vectors ((v (vec 1e-8 1e-8 1e-8)) (o (vec)))
  (ok (v= (vstab! o v) +zero-vector+))
  (ok (v= o +zero-vector+))
  (ok (v= (vstab v) +zero-vector+)))

(diag "vector zero")
(with-vector (v (vec 1 2 3))
  (ok (v= (vzero! v) +zero-vector+))
  (ok (v= v +zero-vector+))
  (ok (v= (vec-zero) +zero-vector+)))

(diag "vector list conversion")
(is (v->list (vec 1 2 3)) '(1.0 2.0 3.0) :test #'equal)
(ok (v= (list->v '(1 2 3)) (vec 1 2 3)))

(diag "vector equality")
(ok (v= (vec 1 2 3) (vec 1 2 3)))
(ok (v~ (vec (+ 1 1e-8) (+ 2 1e-8) (+ 3 1e-8)) (vec 1 2 3)))
(ok (v~ (vec 1e-8 1e-8 1e-8) +zero-vector+))

(diag "addition")
(with-vectors ((v (vec 1 2 3)) (o (vec)))
  (ok (v= (v+! o v v) (vec 2 4 6)))
  (ok (v= o (vec 2 4 6)))
  (ok (v= (v+ v v) (vec 2 4 6))))

(diag "subtraction")
(with-vectors ((v1 (vec 3 5 7)) (v2 (vec 1 2 3)) (o (vec)))
  (ok (v= (v-! o v1 v2) (vec 2 3 4)))
  (ok (v= o (vec 2 3 4)))
  (ok (v= (v- v1 v2) (vec 2 3 4))))

(diag "hadamard product")
(with-vectors ((v1 (vec 1 2 3)) (v2 (vec 2 3 4)) (o (vec)))
  (ok (v= (vhad*! o v1 v2) (vec 2 6 12)))
  (ok (v= o (vec 2 6 12)))
  (ok (v= (vhad* v1 v2) (vec 2 6 12))))

(diag "hadamard quotient")
(with-vectors ((v1 (vec 6 6 8)) (v2 (vec 2 3 8)) (o (vec)))
  (ok (v= (vhad/! o v1 v2) (vec 3 2 1)))
  (ok (v= o (vec 3 2 1)))
  (ok (v= (vhad/ v1 v2) (vec 3 2 1))))

(diag "scalar product")
(with-vectors ((v (vec 1 2 3)) (o (vec)))
  (ok (v= (vscale! o v 5.0) (vec 5 10 15)))
  (ok (v= o (vec 5 10 15)))
  (ok (v= (vscale v 5.0) (vec 5 10 15))))

(diag "dot product")
(is (vec-dot (vec 1 0 0) (vec 1 0 0)) 1.0)
(is (vec-dot (vec 1 0 0) (vec -1 0 0)) -1.0)
(is (vec-dot (vec 1 0 0) (vec 0 1 0)) 0.0)
(is (vec-dot (vec 1 0 0) (vec 0 0 1)) 0.0)
(is (vec-dot (vec 0 1 0) (vec 0 0 1)) 0.0)

(diag "magnitude")
(is (vmag +zero-vector+) 0.0)
(is (vmag (vec 1)) 1.0)
(is (vmag (vec 1 2 3)) 3.7416575)

(diag "normalize")
(with-vectors ((v (vec 2 0 0)) (o (vec)))
  (ok (v= (vnormalize! o (vec 2 0 0)) (vec 1 0 0)))
  (ok (v= o (vec 1 0 0)))
  (ok (v= (vnormalize (vec 2 0 0)) (vec 1 0 0)))
  (ok (v= (vnormalize (vec 0 2 0)) (vec 0 1 0)))
  (ok (v= (vnormalize (vec 0 0 2)) (vec 0 0 1)))
  (ok (v~ (vnormalize (vec 1 2 3)) (vec 0.26726124 0.5345225 0.8017837))))

(diag "round")
(with-vectors ((v (vec 1.5 2.5 3.5)) (o (vec)))
  (ok (v= (vround! o v) (vec 2 2 4)))
  (ok (v= o (vec 2 2 4)))
  (ok (v= (vround v) (vec 2 2 4))))

(diag "abs")
(with-vectors ((v (vec -1 -2 -3)) (o (vec)))
  (ok (v= (vabs! o v) (vec 1 2 3)))
  (ok (v= o (vec 1 2 3)))
  (ok (v= (vabs v) (vec 1 2 3))))

(diag "negate")
(with-vectors ((v (vec 1 2 3)) (o (vec)))
  (ok (v= (vneg! o v) (vec -1 -2 -3)))
  (ok (v= o (vec -1 -2 -3)))
  (ok (v= (vneg v) (vec -1 -2 -3))))

(diag "cross product")
(with-vectors ((v1 (vec 1 0 0)) (v2 (vec 0 1 0)) (o (vec)))
  (ok (v= (vcross! o v1 v2) (vec 0 0 1)))
  (ok (v= o (vec 0 0 1)))
  (ok (v= (vcross (vec 1 0 0) (vec 0 1 0)) (vec 0 0 1)))
  (ok (v= (vcross (vec 1 0 0) (vec 0 0 1)) (vec 0 -1 0)))
  (ok (v= (vcross (vec 0 1 0) (vec 1 0 0)) (vec 0 0 -1)))
  (ok (v= (vcross (vec 0 1 0) (vec 0 0 1)) (vec 1 0 0)))
  (ok (v= (vcross (vec 0 0 1) (vec 1 0 0)) (vec 0 1 0)))
  (ok (v= (vcross (vec 0 0 1) (vec 0 1 0)) (vec -1 0 0))))

(diag "angle")
(let ((angle (vangle (vec 0 1 0) (vec 1 0 1))))
  (<= (abs (- angle (/ pi 2))) 1e-7))
(let ((angle (vangle (vec 1 1 0) (vec 1 0 1))))
  (<= (abs (- angle (/ pi 3))) 1e-7))
(let ((angle (vangle (vec 1 0 0) (vec 1 1 0))))
  (<= (abs (- angle (/ pi 4))) 1e-7))

(diag "zero vector predicate")
(ok (vzerop +zero-vector+))
(ok (vzerop (vec 0 0 0)))

(diag "direction equality")
(ok (vdir= (vec (random 1.0) 0 0) (vec (random 1.0) 0 0)))
(ok (vdir= (vec 0 (random 1.0) 0) (vec 0 (random 1.0) 0)))
(ok (vdir= (vec 0 0 (random 1.0)) (vec 0 0 (random 1.0))))

(diag "parallelity")
(ok (vparallelp (vec (1- (random 2.0)) 0 0) (vec (1- (random 2.0)) 0 0)))
(ok (vparallelp (vec 0 (1- (random 2.0)) 0) (vec 0 (1- (random 2.0)) 0)))
(ok (vparallelp (vec 0 0 (1- (random 2.0))) (vec 0 0 (1- (random 2.0)))))

(diag "linear interpolation")
(with-vectors ((v1 (vec 1 2 3)) (v2 (vec 2 3 4)) (o (vec)))
  (ok (v= (vlerp! o v1 v2 0.5) (vec 1.5 2.5 3.5)))
  (ok (v= o (vec 1.5 2.5 3.5)))
  (ok (v= (vlerp v1 v2 0.5) (vec 1.5 2.5 3.5))))

(diag "component-wise minimum")
(with-vectors ((v1 (vec 2 3 6)) (v2 (vec 1 4 5)) (o (vec)))
  (ok (v= (vmin! o v1 v2) (vec 1 3 5)))
  (ok (v= o (vec 1 3 5)))
  (ok (v= (vmin v1 v2) (vec 1 3 5))))

(diag "component-wise maximum")
(with-vectors ((v1 (vec 2 3 6)) (v2 (vec 1 4 5)) (o (vec)))
  (ok (v= (vmax! o v1 v2) (vec 2 4 6)))
  (ok (v= o (vec 2 4 6)))
  (ok (v= (vmax v1 v2) (vec 2 4 6))))

(finalize)
